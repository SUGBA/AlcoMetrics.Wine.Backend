// <auto-generated />
using DataBase.EF.ConnectionFroWine.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;

#nullable disable

namespace DataBase.EF.ConnectionFroWine.Migrations
{
    [DbContext(typeof(WineDbContext))]
    partial class WineDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WI.Core.Models.ShareRealizations.WineAdministrator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserRole")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("WineAdministrators");
                });

            modelBuilder.Entity("WI.Core.Models.WineRealizations.AreometrDefaultValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AreometerValue")
                        .HasColumnType("integer");

                    b.Property<double>("SugarValue")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("AreometrDefaultValues");
                });

            modelBuilder.Entity("WI.Core.Models.WineRealizations.DifferenceAreometrDefaultValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DifferenceAreometerValue")
                        .HasColumnType("integer");

                    b.Property<double>("EthanolValue")
                        .HasColumnType("double precision");

                    b.Property<double>("SugarValue")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("DifferenceAreometrDefaultValues");
                });

            modelBuilder.Entity("WI.Core.Models.WineRealizations.GrapeVariety", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("AcidValue")
                        .HasColumnType("double precision");

                    b.Property<string>("GrapeVarietyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("SugarValue")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("GrapeVarieties");
                });

            modelBuilder.Entity("WI.Core.Models.WineRealizations.WineDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CurrentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("IndicatorId")
                        .HasColumnType("integer");

                    b.Property<int>("TimeLineId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IndicatorId");

                    b.HasIndex("TimeLineId");

                    b.ToTable("WineDays");
                });

            modelBuilder.Entity("WI.Core.Models.WineRealizations.WineEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DayId")
                        .HasColumnType("integer");

                    b.Property<int>("EventType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<int>("TypicalEventId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DayId");

                    b.HasIndex("TypicalEventId");

                    b.ToTable("WineEvents");
                });

            modelBuilder.Entity("WI.Core.Models.WineRealizations.WineIndicator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("EthanolValue")
                        .HasColumnType("double precision");

                    b.Property<double>("NitrogenValue")
                        .HasColumnType("double precision");

                    b.Property<double>("SugarValue")
                        .HasColumnType("double precision");

                    b.Property<double>("WortValue")
                        .HasColumnType("double precision");

                    b.Property<double>("YeastValue")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("WineIndicators");
                });

            modelBuilder.Entity("WI.Core.Models.WineRealizations.WineReferenceInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Information")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UsedModule")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("WineReferenceInformations");
                });

            modelBuilder.Entity("WI.Core.Models.WineRealizations.WineTimeLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DesiredIndicatorId")
                        .HasColumnType("integer");

                    b.Property<string>("TimeLineName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DesiredIndicatorId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("WineTimeLines");
                });

            modelBuilder.Entity("WI.Core.Models.WineRealizations.WineTypicalEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EventType")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("WineTypicalEvents");
                });

            modelBuilder.Entity("WI.Core.Models.WineRealizations.WineUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserRole")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("WineUsers");
                });

            modelBuilder.Entity("WI.Core.Models.WineRealizations.WineDay", b =>
                {
                    b.HasOne("WI.Core.Models.WineRealizations.WineIndicator", "Indicator")
                        .WithMany()
                        .HasForeignKey("IndicatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WI.Core.Models.WineRealizations.WineTimeLine", "TimeLine")
                        .WithMany("Days")
                        .HasForeignKey("TimeLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Indicator");

                    b.Navigation("TimeLine");
                });

            modelBuilder.Entity("WI.Core.Models.WineRealizations.WineEvent", b =>
                {
                    b.HasOne("WI.Core.Models.WineRealizations.WineDay", "Day")
                        .WithMany("Events")
                        .HasForeignKey("DayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WI.Core.Models.WineRealizations.WineTypicalEvent", "TypicalEvent")
                        .WithMany()
                        .HasForeignKey("TypicalEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Day");

                    b.Navigation("TypicalEvent");
                });

            modelBuilder.Entity("WI.Core.Models.WineRealizations.WineTimeLine", b =>
                {
                    b.HasOne("WI.Core.Models.WineRealizations.WineIndicator", "DesiredIndicator")
                        .WithMany()
                        .HasForeignKey("DesiredIndicatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WI.Core.Models.WineRealizations.WineUser", "User")
                        .WithOne("TimeLines")
                        .HasForeignKey("WI.Core.Models.WineRealizations.WineTimeLine", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DesiredIndicator");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WI.Core.Models.WineRealizations.WineDay", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("WI.Core.Models.WineRealizations.WineTimeLine", b =>
                {
                    b.Navigation("Days");
                });

            modelBuilder.Entity("WI.Core.Models.WineRealizations.WineUser", b =>
                {
                    b.Navigation("TimeLines")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
